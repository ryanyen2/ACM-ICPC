#include <iostream>
#include<algorithm>
#include <vector>
#include <string>
#include <iterator>
#include <cstdio>
using namespace std;
#define _for(i, a, b) for (int i = (a); i<(b); ++i)
#define _rep(i, a, b) for (int i = (a); i <= (b); i++)
template<typename T>
ostream& operator<<(ostream& os, const vector<T>& v) {
	_for(i, 0, v.size()) os << v[i] << " ";
	return os;
}

vector<int> g[10005];
int used[10005];
void DFS(int nd) {
	used[nd] = 1;
	int i;
	for (i = g[nd].size() - 1; i >= 0; i--) {
		if (!used[g[nd][i]]) {
			DFS(g[nd][i]);
		}
	}
}
/*
 (0 1 2 3 4 5 6 7 8 9 10)
{ 0 0 0 0 0 0 1 1 0 1 1} : used
             10 1   3 6
                5     7
                      8
                      9

if visited -> used[i] = 1
else -> recursion, DFS the number
*/




int main() {
	int t, n, m, l, i, z, x, y;
	cin >> t;
	while (t--) {
		cin >> n >> m >> l;
		for (i = 0; i <= n; i++)
			g[i].clear(), used[i] = 0;
		while (m--) {
			cin >> x >> y;
			g[x].push_back(y);
		}
		while (l--) {
			cin >> z;
			DFS(z);
		}
		int cnt = 0;
		for (i = 0; i <= n; i++)
			cnt += used[i];
		printf("%d\n", cnt);
	}
	return 0;
}

/*
SMAPLE INPUT:
8
10 17 4
1 8
1 10
3 5
3 7
3 8
4 1
4 8
5 6
6 10
7 1
7 5
8 10
9 3
10 6
10 7
10 8
10 10
10
10
5
10
10 23 5
1 1
1 2
1 4
2 3
3 5
3 7
3 8
4 1
4 3
4 8
4 10
5 2
5 5
6 2
6 3
7 3
8 4
8 8
8 10
9 10
10 7
10 9
10 10
4
6
7
5
7
12 30 9
1 5
1 9
2 1
2 4
2 8
3 10
4 3
4 5
5 2
5 3
6 4
7 3
7 5
7 12
8 2
8 3
8 5
8 9
9 2
9 7
10 2
10 6
10 10
11 4
11 5
11 9
11 11
12 1
12 2
12 12
2
6
6
4
5
5
4
4
2
9 21 8
1 1
1 3
2 3
2 7
3 5
4 1
4 3
5 1
5 5
5 7
5 9
6 6
6 8
6 9
7 4
7 5
7 6
8 3
8 5
9 1
9 3
1
7
7
8
5
6
3
3
7 6 1
1 3
3 2
3 4
6 6
6 7
7 4
4
15 46 8
1 3
1 4
1 11
1 15
2 1
2 4
2 10
2 15
3 7
3 13
4 7
5 3
5 5
5 9
5 12
6 2
6 4
6 6
6 7
6 9
6 10
6 11
7 7
7 9
7 13
8 8
8 11
8 15
9 15
10 10
11 2
11 6
11 12
12 5
12 13
13 8
13 9
13 14
14 2
14 9
14 11
14 13
14 14
15 3
15 5
15 10
3
12
13
2
1
14
3
11
5 5 0
1 2
1 5
2 1
3 2
3 3
14 31 4
1 5
1 7
1 10
1 11
2 10
2 12
3 5
3 7
4 9
4 10
4 11
5 3
5 6
5 12
6 13
7 5
7 13
8 3
8 4
8 10
8 13
10 2
10 3
10 6
10 8
10 11
11 3
12 2
12 4
12 12
12 13
10
7
11
5
2 3 4
1 2
2 1
2 2
1
1
2
2
18 56 2
1 5
1 9
3 7
3 10
4 15
5 7
5 12
6 2
6 15
7 4
7 5
7 8
7 9
7 14
8 2
8 17
9 1
9 4
9 5
10 4
10 10
10 13
10 14
10 17
11 8
11 15
11 18
12 1
12 10
12 12
12 14
13 2
13 5
13 7
13 8
13 9
14 8
14 10
14 11
15 7
15 9
15 10
15 11
16 2
16 4
16 10
16 11
16 15
17 1
17 2
17 7
17 8
18 2
18 6
18 9
18 17
16
5
19 74 6
1 2
1 4
1 8
1 15
2 5
2 9
2 13
2 15
2 17
2 18
2 19
3 11
3 13
4 13
4 15
4 16
5 1
5 14
5 15
5 16
6 5
6 11
6 12
6 17
7 6
7 11
7 16
8 3
8 16
8 19
9 5
9 6
9 7
9 9
9 13
9 19
10 6
10 8
10 9
10 10
10 12
10 14
10 17
11 1
11 5
11 12
11 19
12 3
12 7
13 7
13 13
13 16
14 10
14 13
14 18
15 1
15 5
15 11
16 10
16 14
16 15
16 16
17 2
17 5
17 10
17 16
17 19
18 2
18 4
18 12
18 13
18 16
19 14
19 19
13
4
5
6
13
10



SAMPLE OUTPUT
6
10
11
8
1
15
0
12
*/
